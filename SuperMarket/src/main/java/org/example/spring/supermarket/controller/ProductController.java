package org.example.spring.supermarket.controller;

import jakarta.validation.Valid;
import org.example.spring.supermarket.DTO.productDTO;
import org.example.spring.supermarket.entity.Categories;
import org.example.spring.supermarket.entity.Inventory;
import org.example.spring.supermarket.entity.Product;
import org.example.spring.supermarket.repository.CategoriesRepository;
import org.example.spring.supermarket.repository.InventoryRepository;
import org.example.spring.supermarket.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.naming.Binding;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/products")
public class ProductController {
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoriesRepository categoriesRepository;

    @Autowired
    private InventoryRepository inventoryRepository;

    @GetMapping
    public String showAllProducts(Model model) {
        List<Product> products = productRepository.findAll();
        List<Categories> categories = categoriesRepository.findAll();
        List<Object[]> inventoryData = inventoryRepository.findAllProductQuantities();

        // Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ v·ªÅ Map<Integer, Integer>
        Map<Integer, Integer> productQuantities = inventoryData.stream()
                .collect(Collectors.toMap(
                        data -> (Integer) data[0],  // productId
                        data -> ((Number) data[1]).intValue() // Chuy·ªÉn ƒë·ªïi Long th√†nh Integer
                ));

        model.addAttribute("products", products);
        model.addAttribute("categories", categories);
        model.addAttribute("productQuantities", productQuantities);
        return "products/listProduct"; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n template ƒë√∫ng
    }


    @GetMapping("/create")
    public String createProduct(Model model) {
        productDTO productDTO =  new productDTO();
        List<Categories> categories = categoriesRepository.findAll();
        model.addAttribute("productDTO", productDTO);
        model.addAttribute("categories", categories);
        System.out.println("S·ªë l∆∞·ª£ng danh m·ª•c: " + categories.size()); // Debug
        return "products/createProduct";
    }
    @PostMapping("/create")
    public String createProduct(
            @Valid @ModelAttribute("productDTO") productDTO productDTO,
            BindingResult result,
            Model model) {

        System.out.println("üîπ Request received for createProduct!");

        if (result.hasErrors()) {
            System.out.println("üî∏ Validation errors: " + result.getAllErrors());
            List<Categories> categories = categoriesRepository.findAll();
            model.addAttribute("categories", categories);
            return "products/createProduct";
        }

        Date createAt = new Date();

        // Ki·ªÉm tra danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
        Categories category = categoriesRepository.findById(productDTO.getCategoryId())
                .orElse(null);
        if (category == null) {
            result.rejectValue("categoryId", "error.productDTO", "Danh m·ª•c kh√¥ng t·ªìn t·∫°i!");
            return "products/createProduct";
        }

        // Chuy·ªÉn ƒë·ªïi t·ª´ DTO sang Entity
        Product product = new Product();
        product.setName(productDTO.getName());
        product.setDescription(productDTO.getDescription());
        product.setPrice(productDTO.getPrice());
        product.setCreatedAt(createAt);
        product.setCategory(category);

        // X·ª≠ l√Ω upload ·∫£nh
        MultipartFile imageFile = productDTO.getImage();
        if (imageFile != null && !imageFile.isEmpty()) {
            try {
                // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c l∆∞u ·∫£nh (tuy·ªát ƒë·ªëi)
                String uploadDir = "src/main/resources/static/images/";
                File uploadFolder = new File(uploadDir);
                if (!uploadFolder.exists()) {
                    uploadFolder.mkdirs(); // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
                }

                // T·∫°o t√™n file ·∫£nh duy nh·∫•t ƒë·ªÉ tr√°nh ghi ƒë√®
                String fileName = System.currentTimeMillis() + "_" + imageFile.getOriginalFilename();
                Path filePath = Path.of(uploadDir, fileName);

                // L∆∞u file ·∫£nh v√†o th∆∞ m·ª•c
                Files.copy(imageFile.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

                // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh v√†o database
                product.setImage("/images/" + fileName);

                System.out.println("‚úÖ ·∫¢nh ƒë√£ l∆∞u th√†nh c√¥ng: " + filePath);
            } catch (IOException e) {
                throw new RuntimeException("‚ùå L·ªói khi l∆∞u ·∫£nh: " + e.getMessage(), e);
            }
        }

        // L∆∞u s·∫£n ph·∫©m v√†o database
        product = productRepository.save(product);

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c·ªßa Inventory
        if (productDTO.getQuantity() != null && productDTO.getQuantity() >= 0 &&
                productDTO.getPurchasePrice() != null && productDTO.getPurchasePrice().compareTo(BigDecimal.ZERO) >= 0)
        {

            // T·∫°o m·ªôt Inventory m·ªõi ƒë·ªÉ theo d√µi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
            Inventory inventory = new Inventory();
            inventory.setProduct(product);
            inventory.setQuantity(productDTO.getQuantity());
            inventory.setPurchaseDate(createAt);
            inventory.setPurchasePrice(productDTO.getPrice());
            inventory.setLastUpdated(createAt);

            // L∆∞u Inventory v√†o c∆° s·ªü d·ªØ li·ªáu
            inventoryRepository.save(inventory);
            System.out.println("‚úÖ Inventory saved: " + inventory.getQuantity() + " items for " + product.getName());
        } else {
            System.out.println("‚ö†Ô∏è C·∫£nh b√°o: Gi√° nh·∫≠p ho·∫∑c s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá.");
        }

        return "redirect:/products";
    }


    @GetMapping("/delete")
    public String deleteProduct(@RequestParam int id) {
        try{
            Product product = productRepository.findById(id).get();
            //delete image
            Path path = Paths.get("src/main/resources/static/images/" + product.getImage());
            try{
                Files.delete(path);
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
            //delete
            productRepository.delete(product);
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        return "redirect:/products";
    }

    @GetMapping("/detail/{id}")
    public String viewProduct(@PathVariable("id") int id, Model model) {
        Optional<Product> productOpt = productRepository.findById(id);

        if (productOpt.isPresent()) {
            Product product = productOpt.get();

            // L·∫•y danh s√°ch s·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ª´ InventoryRepository
            List<Object[]> inventoryData = inventoryRepository.findAllProductQuantities();

            // T·∫°o map ƒë·ªÉ l·∫•y quantity c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i
            Map<Integer, Integer> productQuantities = inventoryDataToMap(inventoryData);

            int quantity = productQuantities.getOrDefault(product.getId(), 0); // L·∫•y s·ªë l∆∞·ª£ng ho·∫∑c g√°n 0 n·∫øu kh√¥ng c√≥

            model.addAttribute("product", product);
            model.addAttribute("productQuantity", quantity); // Th√™m s·ªë l∆∞·ª£ng v√†o model
            return "products/productDetail";
        } else {
            return "redirect:/products";
        }
    }

    // Ph∆∞∆°ng th·ª©c chuy·ªÉn danh s√°ch object[] th√†nh Map<Integer, Integer>
    private Map<Integer, Integer> inventoryDataToMap(List<Object[]> inventoryData) {
        return inventoryData.stream().collect(Collectors.toMap(
                data -> (Integer) data[0], // productId
                data -> ((Number) data[1]).intValue() // Quantity
        ));
    }


}
